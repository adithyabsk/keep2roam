name: build

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.3
      - uses: actions/setup-python@v2
      - name: set PY env var
        run: echo "PY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_ENV
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - name: Add Poetry to Path Unix
        run: echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2.0.0
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: poetry|pre-commit|${{ env.PY }}|${{ hashFiles('poetry.lock') }}
      - name: Install Project Dependencies (Poetry)
        run: poetry install -vvv
        if: steps.cache-poetry.outputs.cache-hit != 'true'
      - name: Add poetry env to PATH
        run: echo "$( poetry env info --path )/bin" >> $GITHUB_PATH
      - name: Run Lint Steps
        uses: pre-commit/action@v2.0.0
  test:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        python: [ ^3.7, ^3.8, ^3.9 ]
    steps:
      - uses: actions/checkout@v2.3.3
      - uses: actions/setup-python@v2
      - name: set PY env var
        run: echo "PY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_ENV
      - name: Install Poetry
        run: |
          pip install --upgrade pip
          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - name: Add Poetry to Path Unix
        run: echo "::add-path::$HOME/.poetry/bin"
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2.0.0
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: poetry|build|${{ matrix.os }}|${{ env.PY }}|${{ hashFiles('poetry.lock') }}
      - name: Install Project Dependencies (Poetry)
        run: poetry install -vvv
        if: steps.cache-poetry.outputs.cache-hit != 'true'
      - name: Run Pytest
        run: poetry run pytest --cov-report=xml
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          verbose: true
